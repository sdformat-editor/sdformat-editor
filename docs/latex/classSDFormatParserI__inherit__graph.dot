digraph "SDFormatParserI"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  Node1 [id="Node000001",shape=plain,label=<<TABLE CELLBORDER="0" BORDER="1"><TR><TD COLSPAN="2" CELLPADDING="1" CELLSPACING="0">SDFormatParserI</TD></TR>
<HR/>
<TR><TD COLSPAN="2" CELLPADDING="1" CELLSPACING="0">&nbsp;</TD></TR>
<HR/>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">virtual void Initialize<BR ALIGN="LEFT"/>(const std::string file<BR ALIGN="LEFT"/>_path, bool &amp;success)=0<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">virtual sdf::SDFPtr<BR ALIGN="LEFT"/> GetSDFElement()=0<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">virtual std::vector<BR ALIGN="LEFT"/>&lt; sdf::ElementPtr &gt;<BR ALIGN="LEFT"/> LookupElementsByAttributeType<BR ALIGN="LEFT"/>(const std::string &amp;attribute_type)=0<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">virtual std::vector<BR ALIGN="LEFT"/>&lt; sdf::ElementPtr &gt;<BR ALIGN="LEFT"/> LookupElementsByAttributeType<BR ALIGN="LEFT"/>AndValue(const std::string<BR ALIGN="LEFT"/> &amp;attribute_type, const std<BR ALIGN="LEFT"/>::string &amp;attribute_value)=0<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">virtual std::vector<BR ALIGN="LEFT"/>&lt; sdf::ElementPtr &gt;<BR ALIGN="LEFT"/> LookupElementsByType<BR ALIGN="LEFT"/>(const std::string &amp;type)=0<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">virtual Mentions FindMentions<BR ALIGN="LEFT"/>(std::string key)=0<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">virtual Mentions FindMentions<BR ALIGN="LEFT"/>(std::string key, sdf::ElementPtr<BR ALIGN="LEFT"/> element_to_exclude)=0<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">virtual Mentions FindMentions<BR ALIGN="LEFT"/>(std::string key, sdf::ParamPtr<BR ALIGN="LEFT"/> attribute_to_exclude)=0<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">virtual Mentions FindMentions<BR ALIGN="LEFT"/>(std::string key, sdf::ElementPtr<BR ALIGN="LEFT"/> element_to_exclude, sdf::ParamPtr<BR ALIGN="LEFT"/> attribute_to_exclude)=0<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">virtual std::string<BR ALIGN="LEFT"/> GetSDFTreePathToElement<BR ALIGN="LEFT"/>(sdf::ElementPtr element)=0<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">virtual std::pair&lt;<BR ALIGN="LEFT"/> std::vector&lt; ModelViewerI<BR ALIGN="LEFT"/>::ModelInfo &gt;, std::vector<BR ALIGN="LEFT"/>&lt; ModelViewerI::PresetModelInfo<BR ALIGN="LEFT"/> &gt; &gt; GetModelsFromSDFTree()=0<BR ALIGN="LEFT"/></TD></TR>
</TABLE>>
,height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Interface for the SDFormat Editor's Parser."];
  Node1 -> Node2 [id="edge2_Node000001_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" ",arrowtail="onormal"];
  Node2 [id="Node000002",shape=plain,label=<<TABLE CELLBORDER="0" BORDER="1"><TR><TD COLSPAN="2" CELLPADDING="1" CELLSPACING="0">SDFormatParser</TD></TR>
<HR/>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">-</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">sdf::SDFPtr sdfElement<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">-</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">std::string sdf_file_path<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">-</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">bool render_collisions<BR ALIGN="LEFT"/></TD></TR>
<HR/>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">-</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">void Initialize(const<BR ALIGN="LEFT"/> std::string file_path,<BR ALIGN="LEFT"/> bool &amp;success) override<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">-</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">sdf::SDFPtr GetSDFElement<BR ALIGN="LEFT"/>() override<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">-</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">std::vector&lt; sdf::Element<BR ALIGN="LEFT"/>Ptr &gt; LookupElementsByAttribute<BR ALIGN="LEFT"/>Type(const std::string &amp;attribute<BR ALIGN="LEFT"/>_type) override<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">-</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">std::vector&lt; sdf::Element<BR ALIGN="LEFT"/>Ptr &gt; LookupElementsByAttribute<BR ALIGN="LEFT"/>TypeAndValue(const std::string<BR ALIGN="LEFT"/> &amp;attribute_type, const std::string<BR ALIGN="LEFT"/> &amp;attribute_value) override<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">-</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">std::vector&lt; sdf::Element<BR ALIGN="LEFT"/>Ptr &gt; LookupElementsInternal<BR ALIGN="LEFT"/>(const std::string &amp;attribute<BR ALIGN="LEFT"/>_type, const std::string &amp;attribute<BR ALIGN="LEFT"/>_value, sdf::ElementPtr scope, sdf<BR ALIGN="LEFT"/>::ElementPtr scope_to_exclude)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">-</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">sdf::ElementPtr FindScope<BR ALIGN="LEFT"/>(sdf::ElementPtr element)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">-</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">sdf::ElementPtr FindCanonical<BR ALIGN="LEFT"/>(sdf::ElementPtr element)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">-</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">std::vector&lt; sdf::Element<BR ALIGN="LEFT"/>Ptr &gt; LookupElementsByType<BR ALIGN="LEFT"/>(const std::string &amp;type)<BR ALIGN="LEFT"/> override<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">-</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">Mentions FindMentions<BR ALIGN="LEFT"/>(std::string key) override<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">-</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">Mentions FindMentions<BR ALIGN="LEFT"/>(std::string key, sdf<BR ALIGN="LEFT"/>::ElementPtr element_to<BR ALIGN="LEFT"/>_exclude) override<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0"></TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">and 8 more...</TD></TR>
</TABLE>>
,height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$classSDFormatParser.html",tooltip="Implementation of SDFormatParserI."];
}
